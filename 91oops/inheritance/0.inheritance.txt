
In Python, inheritance is a core object-oriented programming (OOP) concept that allows a class (the child or derived class) to inherit attributes and methods from another class (the parent or base class), promoting code reusability and hierarchical class structures.
                                            or

Inheritance enables you to create new classes (child classes) based on existing ones (parent classes), inheriting their properties and behaviors.


Benefits:

Code Reusability:
Child classes can reuse the code from their parent classes, reducing redundancy and development time.

Hierarchical Structure:
Inheritance facilitates the creation of a class hierarchy where child classes specialize or extend the functionality of their parent classes.

How it works:
Parent Class: The class from which other classes inherit.
Child Class: The class that inherits from a parent class.
Syntax: You define a child class by specifying the parent class in parentheses after the class name.
Python

        # Parent class
        class Animal:
            def __init__(self, name):
                self.name = name

            def speak(self):
                print(f"{self.name} makes a sound")

        # Child class inheriting from Animal
        class Dog(Animal):
            def __init__(self, name, breed):
                super().__init__(name)  # Call the parent class's __init__
                self.breed = breed

            def bark(self):
                print(f"{self.name} barks")
Types of Inheritance:
Single Inheritance: A class inherits from only one parent class.
Multiple Inheritance: A class inherits from multiple parent classes.
Multilevel Inheritance: A class inherits from a class that itself inherits from another class.
Hierarchical Inheritance: Multiple classes inherit from a single parent class.
Hybrid Inheritance: A combination of different types of inheritance.
super():
The super() function is used to call methods of the parent class from within the child class, especially when overriding methods.